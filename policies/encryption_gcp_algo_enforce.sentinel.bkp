# Import common-functions/tfplan-functions/tfplan-functions.sentinel
# with alias "plan"
import "tfstate-functions" as tfstate
import "tfstate/v2" as tfstate2
import "tfplan-functions" as plan
import "strings"
import "types"

## Global Values for GCP_CAS_CADEVOPSALG starts here ###
allowed_algorithms_ca_spec = ["RSA_PSS_2048_SHA256", "RSA_PSS_3072_SHA256", "RSA_PSS_4096_SHA256", "RSA_PKCS1_2048_SHA256", "RSA_PKCS1_3072_SHA256", "RSA_PKCS1_4096_SHA256"]
allowed_algorithm_crypto_vt = ["RSA_SIGN_PSS_2048_SHA256", "RSA_SIGN_PSS_3072_SHA256", "RSA_SIGN_PSS_4096_SHA256", "RSA_SIGN_PKCS1_2048_SHA256", "RSA_SIGN_PKCS1_3072_SHA256", "RSA_SIGN_PKCS1_4096_SHA256"]

# Get all Instances of metioned types from tfplan and tfstate files
allCAPoolTfstateInstances = tfstate.find_resources("google_privateca_ca_pool")
allCAPoolTfplanInstances = plan.find_resources("google_privateca_ca_pool")
allCertAuthorityInstances = plan.find_resources("google_privateca_certificate_authority")
allCryptoKeyTfplanInstances = plan.find_resources("google_kms_crypto_key")

array = {}
for allCAPoolTfstateInstances as address, rc {
	capoolname = tfstate.evaluate_attribute(rc, "name")
	capooltier = tfstate.evaluate_attribute(rc, "tier")
	array[capoolname] = capooltier
}

array2 = {}
for allCAPoolTfplanInstances as address, rc {
	cpool_name = plan.evaluate_attribute(rc, "name")
	cpool_tier = plan.evaluate_attribute(rc, "tier")
	array2[cpool_name] = cpool_tier

}
array_main = {}
for array as address, rc {
	array_main[address] = rc
}

for array2 as address, rc {
	array_main[address] = rc
}

find_resources = func(type) {
	resources = filter tfstate2.resources as address, r {
		r.type is type
	}
	return resources
}

allCryptoKeyTfstateInstances = find_resources("google_kms_crypto_key")

array_tfstate_cryptokey = {}
for allCryptoKeyTfstateInstances as address, rc {
	cryptokeyname = tfstate.evaluate_attribute(rc, "name")
	cryptokeyalgorithm = tfstate.evaluate_attribute(rc, "version_template.0.algorithm")
	array_tfstate_cryptokey[cryptokeyname] = cryptokeyalgorithm
}

array_tfplan_cryptokey = {}
for allCryptoKeyTfplanInstances as address, rc {
	crypto_plan_keyname = plan.evaluate_attribute(rc, "name")
	crypto_plan_key_algorithm = plan.evaluate_attribute(rc, "version_template.0.algorithm")
	array_tfplan_cryptokey[crypto_plan_keyname] = crypto_plan_key_algorithm
}

array_cryptokey_main = {}

for array_tfstate_cryptokey as address, rc {
	array_cryptokey_main[address] = rc
}
for array_tfplan_cryptokey as address, rc {
	array_cryptokey_main[address] = rc
}

b = 0
c = 0
messages_algorithm = {}
for allCertAuthorityInstances as address, rc {

	cert_pool_name = plan.evaluate_attribute(rc, "pool")
	a = array_main[cert_pool_name]
	b = a
	c = cert_pool_name

	//print("pool name:---> " + c)
	//print("pool tier:---> " + b)

	if (not (types.type_of(b) is "undefined") and b == "ENTERPRISE") {
		kms_key_version = plan.evaluate_attribute(rc, "key_spec.0.cloud_kms_key_version")

		if (kms_key_version == null) {
			messages_algorithm[address] = rc
			print("kms key version undefined, Please specify key_spec.0.cloud_kms_key_version attribute for resource: " + address)
		} else {
			cryptoKeyName = strings.split(kms_key_version, "/")
			c_key_name = cryptoKeyName[7]
			x = array_cryptokey_main[c_key_name]
			is_x_undefined = rule { types.type_of(x) is "undefined" }

			if is_x_undefined {
				messages_algorithm[address] = rc
				print("Please use cryptokey with version template and Algorithm for Certificate Authority for resource:" + address)
			} else {
				if not (x in allowed_algorithm_crypto_vt) {
					print("Algorithm used to create " + c_key_name + " is not in Allowed Algorithm List")
					messages_algorithm[address] = rc
				}
			}
		}

	} else {
		if (types.type_of(b) is "undefined") {
			messages = "CA Pool Tier Couldn't be Found"
			print("CA Pool Tier Couldn't be Found for pool for resource: " + address)
		}
	}
}

GCP_CAS_CAENTALG = rule { length(messages_algorithm) is 0 }

#######################################################
####--------------DEVOPS RULE-----------------------###
#######################################################

messages_algorithm_devops = {}
for allCertAuthorityInstances as address, rc {
	cert_pool_name_devops = plan.evaluate_attribute(rc, "pool")
	a_devops = array_main[cert_pool_name_devops]

	if (not (types.type_of(a_devops) is "undefined") and a_devops == "DEVOPS") {

		ca_private_kms_algorithm = plan.evaluate_attribute(rc, "key_spec.0.algorithm")
		if (ca_private_kms_algorithm not in allowed_algorithms_ca_spec or types.type_of(ca_private_kms_algorithm) is "undefined" or types.type_of(ca_private_kms_algorithm) is "null" or length(ca_private_kms_algorithm) == 0) {
			messages_algorithm_devops[address] = rc
			print("Algorithm must be defined for resource :- " + address + " .Allowed algorithm are: ", allowed_algorithms_ca_spec)
		}
	} else {
		if (types.type_of(b) is "undefined") {
			messages = "CA Pool Tier Couldn't be Found"
			print("CA Pool Tier Couldn't be Found for pool for resource: " + address)
		}
	}
}

GCP_CAS_CADEVOPSALG = rule { length(messages_algorithm_devops) is 0 }
main = rule { GCP_CAS_CAENTALG and GCP_CAS_CADEVOPSALG }
