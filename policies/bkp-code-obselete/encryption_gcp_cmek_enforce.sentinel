# This sentinel policies enforce encryption at rest utilizing customer managed kms keys
# These sentinel policies enforce Wells Fargo security principles PR-036,PR-037,PR-039

# Import common-functions/tfplan-functions/tfplan-functions.sentinel
# with alias "plan"

import "tfstate-functions" as tfstate
import "tfstate/v2" as tfstate2
import "tfplan-functions" as plan
import "generic-functions" as gen
import "strings"
import "types"

# Resource Types CMEK Param Map
resourceTypesCMEKKeyMap = {
	"google_pubsub_topic": {
		"key":   "kms_key_name",
		"array": null,
        "is_composer": false,
	},
	"google_secret_manager_secret": {
		"key":   "customer_managed_encryption.0.kms_key_name",
		"array": "replication.0.user_managed.0.replicas",
        "is_composer": false,
	},
	"google_dataproc_cluster": {
		"key":   "cluster_config.0.encryption_config.0.kms_key_name",
		"array": null,
        "is_composer": false,
	},
	"google_bigquery_dataset": {
		"key":   "default_encryption_configuration.0.kms_key_name",
		"array": null,
        "is_composer": false,
	},
	"google_storage_bucket": {
		"key":   "encryption.0.default_kms_key_name",
		"array": null,
        "is_composer": false,
	},
	"google_sql_database_instance": {
		"key":   "encryption_key_name",
		"array": null,
        "is_composer": false,
	},
    "google_dataflow_job": {
		"key":   "kms_key_name",
		"array": null,
        "is_composer": false,
	},
    "google_composer_environment": {
		"key":   "config.0.encryption_config.0.kms_key_name",
		"array": null,
        "is_composer": true,
	},
}

# Function to check if KMS Param is Defined
check_for_kms = func(rc, kms_key_param) {
	message = null
	address = rc["address"]
	unknown_kms_key = plan.evaluate_attribute(rc.change.after_unknown, kms_key_param)
	is_unknown_kms_undefined = rule { types.type_of(unknown_kms_key) is "null" }
	if is_unknown_kms_undefined {
		known_kms_key = plan.evaluate_attribute(rc, kms_key_param)
		is_known_kms_undefined = rule { types.type_of(known_kms_key) is "undefined" }
		if is_known_kms_undefined {
			message = plan.to_string(address) + " does not have " + kms_key_param + " defined"
		} else {
			if types.type_of(known_kms_key) is "null" {
				message = plan.to_string(address) + " does not have " + kms_key_param + " defined"
			}
		}
	}
	return message
}

check_multiple_kms = func(address, rc, kms_key_param, array) {
	kms_key_param_array = []
	# messages = {}
	if types.type_of(array) is "null" {
		append(kms_key_param_array, kms_key_param)
	} else {
		kms_attribs = plan.evaluate_attribute(rc, array)
		count = 0
		for kms_attribs as _ {
			append(kms_key_param_array, array + "." + plan.to_string(count) + "." + kms_key_param)
			count += 1
		}
	}
	err = []
	for kms_key_param_array as kkp {
		msg = check_for_kms(rc, kkp)
		if types.type_of(msg) is not "null" {
			append(err, msg)
		}
	}
	return err
}

# Function to check if KMS Param is Defined for Cloud Composer
####------Function to check null and undefined values----###
check_valid = func(value, validator){
    result = false

    if types.type_of(value) is "undefined" or types.type_of(value) is "null" {
        result = false
    } else if value is validator {
        result = true
    }

    return result
}

####------Validating format of KMS key's URL----###
check_kms_composer = func(address, rc, kms_key_param, array){
    message = ""
    kms_key_value = plan.evaluate_attribute(rc, kms_key_param)

    if types.type_of(kms_key_value) is "undefined" or types.type_of(kms_key_value) is "null" {
        message = plan.to_string(address) + " does not have " + kms_key_param + " defined."
    } else {
        is_kms_project = check_valid(strings.split(kms_key_value, "/")[0], "projects")
        is_kms_location = check_valid(strings.split(kms_key_value, "/")[2], "locations")
        is_kms_keyring = check_valid(strings.split(kms_key_value, "/")[4], "keyRings")
        is_kms_cryptokey = check_valid(strings.split(kms_key_value, "/")[6], "cryptoKeys")

        if not (is_kms_project and is_kms_location and is_kms_keyring and is_kms_cryptokey) {
			message = plan.to_string(address) + " does not have the value of kms_key_name as per standards." + " The KMS CMEK URI should be in the format of projects/{projectId}/locations/{location}/keyRings/{keyRingName}/cryptoKeys/{cryptoKeyName}."
		}

        
    }
    return message
}

# Fetch all resources based on resourceTypes
allResources = {}

for resourceTypesCMEKKeyMap as rt, _ {
	resources = plan.find_resources(rt)
	for resources as address, rc {
		allResources[address] = rc
	}
}

# print(messages)
msgs = {}

#------Iterating all fetched resource's values
for allResources as address, rc {
    is_composer = resourceTypesCMEKKeyMap[rc["type"]]["is_composer"]
	
	#------Checking if service is related to GCP Composer
    if is_composer is true {
        msg = check_kms_composer(
            address,
            rc,
            resourceTypesCMEKKeyMap[rc["type"]]["key"],
            resourceTypesCMEKKeyMap[rc["type"]]["array"],
        )
    } else {
        msg = check_multiple_kms(
            address,
            rc,
            resourceTypesCMEKKeyMap[rc["type"]]["key"],
            resourceTypesCMEKKeyMap[rc["type"]]["array"],
        )
    }
	if length(msg) > 0 {
		msgs[address] = msg
	}
}

# Main rule
for msgs as k, v {
	print(k + " =====>" + plan.to_string(v))
}

GCP_RES_CMEK = rule { length(msgs) is 0 }


###########################################################################
######################   Rule - GCP_CAS_CAENTCMEK  ########################
###########################################################################
# Allowed Algorithm List
allowed_algorithm = ["RSA_SIGN_PSS_2048_SHA256", "RSA_SIGN_PSS_3072_SHA256", "RSA_SIGN_PSS_4096_SHA256", "RSA_SIGN_PKCS1_2048_SHA256", "RSA_SIGN_PKCS1_3072_SHA256", "RSA_SIGN_PKCS1_4096_SHA256"]

# Get all Composer Instances
allCAPoolTfstateInstances = tfstate.find_resources("google_privateca_ca_pool")
allCAPoolTfplanInstances = plan.find_resources("google_privateca_ca_pool")
allCertAuthorityInstances = plan.find_resources("google_privateca_certificate_authority")
allCryptoKeyTfplanInstances = plan.find_resources("google_kms_crypto_key")

find_resources = func(type) {
	resources = filter tfstate2.resources as address, r {
		r.type is type
	}

	return resources
}

allCryptoKeyTfstateInstances = find_resources("google_kms_crypto_key")

#print(allCAPoolTfstateInstances)

array = {}
for allCAPoolTfstateInstances as address, rc {
	capoolname = tfstate.evaluate_attribute(rc, "name")
	capooltier = tfstate.evaluate_attribute(rc, "tier")
	array[capoolname] = capooltier
}

//print("-----Tfstate Map------")
//print(array)

array2 = {}
for allCAPoolTfplanInstances as address, rc {
	cpool_name = plan.evaluate_attribute(rc, "name")
	cpool_tier = plan.evaluate_attribute(rc, "tier")
	array2[cpool_name] = cpool_tier

}
//print("-----TFPlan Map--------")
//print(array2)

array_main = {}

for array as address, rc {
	array_main[address] = rc
}

for array2 as address, rc {
	array_main[address] = rc
}

print("-------Final Map after Merge--------")
print(array_main)
b = 0
c = 0
for allCertAuthorityInstances as address, rc {

	cert_pool_name = plan.evaluate_attribute(rc, "pool")
	a = array_main[cert_pool_name]
	b = a
	c = cert_pool_name
}


#########################################################
####--------------Enterprise Rule-1-----------------#####
#########################################################
messages = {}
if (not (types.type_of(b) is "undefined") and b == "ENTERPRISE") {
	for allCertAuthorityInstances as address, rc {

		ca_private_kms_key_version = plan.evaluate_attribute(rc, "key_spec.0.cloud_kms_key_version")
		print("ca_private_kms_key_version is ", ca_private_kms_key_version)
		if (types.type_of(ca_private_kms_key_version) is "undefined") or (types.type_of(ca_private_kms_key_version) is "null") or (length(ca_private_kms_key_version) == 0) {
			messages[address] = rc
			print("The value for ca_private_kms_key_version in Resource " + address + " can't be null or undefined or empty string")
		} else {
			cryptoKeyVersionlist = strings.split(ca_private_kms_key_version, "/")
			if length(cryptoKeyVersionlist) > 1 {
				if not (cryptoKeyVersionlist[0] == "projects" and cryptoKeyVersionlist[2] == "locations" and cryptoKeyVersionlist[4] == "keyRings" and cryptoKeyVersionlist[6] == "cryptoKeys" and cryptoKeyVersionlist[8] == "cryptoKeyVersions") {
					messages[address] = rc
					print("CryptoKeyVersion must be in the format projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*")
				}
			} else {
				messages[address] = rc
				print("CryptoKeyVersion must be in the format projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*")
			}
		}
	}
} else {
    if (types.type_of(b) is "undefined") {
	messages = "CA Pool Tier Couldn't be Found"
	print("CA Pool Tier Couldn't be Found for pool for resource: "+address)
	}
}
GCP_CAS_CAENTCMEK = rule { length(messages) is 0 }


#==========================================================================#
# CODE for GCP_CAS_CAROOTHSM
#==========================================================================#

array_tfstate_cryptokey = {}
for allCryptoKeyTfstateInstances as address, rc {
	cryptokeyname = tfstate.evaluate_attribute(rc, "name")
	cryptokeyalgorithm = tfstate.evaluate_attribute(rc, "version_template.0.protection_level")
	array_tfstate_cryptokey[cryptokeyname] = cryptokeyalgorithm
}

print(array_tfstate_cryptokey)

array_tfplan_cryptokey = {}
for allCryptoKeyTfplanInstances as address, rc {
	crypto_plan_keyname = plan.evaluate_attribute(rc, "name")
	crypto_plan_key_algorithm = plan.evaluate_attribute(rc, "version_template.0.protection_level")
	array_tfplan_cryptokey[crypto_plan_keyname] = crypto_plan_key_algorithm
}

//print(allCryptoKeyTfplanInstances)
print(array_tfplan_cryptokey)

array_cryptokey_main = {}

for array_tfstate_cryptokey as address, rc {
	array_cryptokey_main[address] = rc
}
for array_tfplan_cryptokey as address, rc {
	array_cryptokey_main[address] = rc
}

print(array_cryptokey_main)

messages_selfsign = {}

for allCertAuthorityInstances as address, rc {

	ca_type = plan.evaluate_attribute(rc, "type")
	print("ca_type:-->" + plan.to_string(ca_type))

	if (ca_type == "SELF_SIGNED") {
		kms_key_version = plan.evaluate_attribute(rc, "key_spec.0.cloud_kms_key_version")
		print("kms-value-->" + plan.to_string(kms_key_version))
		print("kms-key-version value--->" + types.type_of(kms_key_version))

		if (kms_key_version == null) {
			messages_selfsign[address] = rc
			print("kms key version (key_spec.0.cloud_kms_key_version) is undefined for resource " + address)
		} else {
			cryptoKeyName = strings.split(kms_key_version, "/")
			print(cryptoKeyName[7])
			c_key_name = cryptoKeyName[7]
			print(array_cryptokey_main[c_key_name])
			x = array_cryptokey_main[c_key_name]
			print(x)
			is_x_undefined = rule { types.type_of(x) is "undefined" }
			print("is x undefined--->" + plan.to_string(is_x_undefined))
			if (is_x_undefined or x is null) {
				print("The cryptokey resource: " + plan.to_string(c_key_name) + "  must have version_template block enabled with protection_level= HSM for resource " + address)
				messages_selfsign[address] = rc
			} else {
				if not (x == "HSM") {
					print("The cryptokey resource: " + plan.to_string(c_key_name) + "  Must have version_template block with protection_level= HSM for resource " + address)
					messages_selfsign[address] = rc

				}
			}

		}
	}

}

GCP_CAS_CAROOTHSM = rule { length(messages_selfsign) is 0 }

main = rule { GCP_RES_CMEK and GCP_CAS_CAENTCMEK and GCP_CAS_CAROOTHSM }
